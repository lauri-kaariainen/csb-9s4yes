{"version":3,"sources":["Character.tsx","Fightengine.tsx","App.tsx","index.tsx"],"names":["createCharacter","stats","name","hp","Valuelist","attackPower","defencePower","fats","delay","toFixed","multiplyDelaysWithNoFloatProblems","num1","num2","timeToHit","currTime","Fightengine","char1","char2","currStep","stepsList","Array","fill","map","e","i","concat","sort","a","b","num","fightEnded","hp1","hp2","logs","currHp1","currHp2","whoHit","state","newHp1","newHp2","Math","min","getRandom","arr","floor","length","random","App","useState","resultLog","setResultLog","idList","setIdList","setChar1","setChar2","useEffect","fetch","then","json","ids","console","log","res","state1","nextState","className","style","minWidth","split","slice","join","logObj","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"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","file":"static/js/main.cd097497.chunk.js","sourcesContent":["export interface ICharacter {\r\n  name: string;\r\n  hp: number;\r\n  attackPower: number;\r\n  defencePower: number;\r\n  fats: number;\r\n  delay: number;\r\n}\r\n/*\r\n\"Valuelist\":[16.492,1248.6,21,11],\r\n\"Desclist\":\"hiilihydraatti,energia, laskennallinen,rasva,proteiini\"*/\r\n\r\nexport const createCharacter = (stats: any): ICharacter => ({\r\n  name: stats.name,\r\n  hp: +(stats.Valuelist[1] * 0.239006), //stats.energyKcal (kcal = 0.239006*joule)\r\n  attackPower: +stats.Valuelist[0], //stats.carbohydrates\r\n  defencePower: +stats.Valuelist[3], //stats.protein,\r\n  fats: +stats.Valuelist[2], //stats.fat,\r\n  delay: +(\r\n    stats.Valuelist[0] +\r\n    stats.Valuelist[2] +\r\n    stats.Valuelist[3]\r\n  ).toFixed(2)\r\n});\r\n","import { ICharacter } from \"./Character\";\r\n\r\nexport interface IGamestate {\r\n  char1: ICharacter;\r\n  char2: ICharacter;\r\n  currStep: number;\r\n  stepsList: number[];\r\n  fightEnded: boolean;\r\n  hp1: number;\r\n  hp2: number;\r\n  logs: IFightLogLine[];\r\n}\r\n\r\nexport interface IFightLogLine {\r\n  // textRepresentation: string;\r\n  currHp1: number;\r\n  currHp2: number;\r\n  whoHit: string;\r\n  currTime: number;\r\n}\r\n\r\nconst multiplyDelaysWithNoFloatProblems = (\r\n  num1: number,\r\n  num2: number\r\n): number => +((num1 * num2 * 100) / 100).toFixed(2);\r\n\r\n// const divideDelaysWithNoFloatProblems = (num1: number, num2: number): number =>\r\n//   +((num1 * 100) / (num2 * 100)).toFixed(2);\r\n\r\nconst moduloWithNoFloatProblems = (num1: number, num2: number): number =>\r\n  (num1 * 100) % (num2 * 100);\r\n\r\nconst timeToHit = (currTime: number, delay: number): boolean =>\r\n  moduloWithNoFloatProblems(currTime, delay) === 0;\r\n\r\nexport const Fightengine = {\r\n  init: (char1: ICharacter, char2: ICharacter): IGamestate => ({\r\n    char1: char1,\r\n    char2: char2,\r\n    currStep: 0,\r\n    stepsList: new Array(200)\r\n      .fill(null)\r\n      .map((e, i): number =>\r\n        multiplyDelaysWithNoFloatProblems(i + 1, char1.delay)\r\n      )\r\n      .concat(\r\n        new Array(200)\r\n          .fill(null)\r\n          .map((e, i): number =>\r\n            multiplyDelaysWithNoFloatProblems(i + 1, char2.delay)\r\n          )\r\n      )\r\n      .sort((a, b) => a - b)\r\n      .map((num) => +num.toFixed(2)),\r\n    fightEnded: false,\r\n    hp1: char1.hp,\r\n    hp2: char2.hp,\r\n    logs: [\r\n      {\r\n        currHp1: char1.hp,\r\n        currHp2: char2.hp,\r\n        whoHit: \"\",\r\n        currTime: 0\r\n        // textRepresentation: \"Taistelu alkaa\"\r\n      }\r\n    ]\r\n  }),\r\n  getNextStep: (state: IGamestate): IGamestate => {\r\n    const newHp1 = timeToHit(state.stepsList[state.currStep], state.char2.delay)\r\n      ? +(\r\n          state.hp1 -\r\n          state.char2.attackPower * (1 - state.char1.defencePower / 100)\r\n        )\r\n      : state.hp1;\r\n    const newHp2 = timeToHit(state.stepsList[state.currStep], state.char1.delay)\r\n      ? +(\r\n          state.hp2 -\r\n          state.char1.attackPower * (1 - state.char2.defencePower / 100)\r\n        )\r\n      : state.hp2;\r\n    return {\r\n      char1: state.char1,\r\n      char2: state.char2,\r\n      currStep: state.currStep + 1,\r\n      stepsList: state.stepsList,\r\n      fightEnded: Math.min(newHp1, newHp2) <= 0,\r\n      hp1: newHp1,\r\n      hp2: newHp2,\r\n      logs: state.logs.concat({\r\n        currHp1: newHp1,\r\n        currHp2: newHp2,\r\n        currTime: state.stepsList[state.currStep],\r\n        whoHit:\r\n          newHp1 !== state.hp1 && newHp2 !== state.hp2\r\n            ? state.char1.name + \", \" + state.char2.name\r\n            : newHp1 !== state.hp1\r\n            ? state.char2.name\r\n            : state.char1.name\r\n      })\r\n    };\r\n  }\r\n};\r\n","import { useState, useEffect } from \"react\";\nimport { createCharacter, ICharacter } from \"./Character\";\nimport { Fightengine, IFightLogLine } from \"./Fightengine\";\n\nconst getRandom = (arr: any[]): number =>\n  arr[Math.floor(arr.length * Math.random())];\n\nexport const App = () => {\n  const [resultLog, setResultLog] = useState<IFightLogLine[]>([]);\n  const [idList, setIdList] = useState<number[]>([]);\n  const [char1, setChar1] = useState<ICharacter | null>(null);\n  const [char2, setChar2] = useState<ICharacter | null>(null);\n\n  useEffect(() => {\n    fetch(\"https://3nkkif0kc7.execute-api.us-east-1.amazonaws.com/id\")\n      .then((e: any) => e.json())\n      .then((ids: number[]) => {\n        setIdList(ids);\n        console.log(ids, getRandom(ids));\n        fetch(\n          \"https://3nkkif0kc7.execute-api.us-east-1.amazonaws.com/id/\" +\n            getRandom(ids)\n        )\n          .then((res: any): any => res.json())\n          .then((json: any): any => setChar1(createCharacter(json[0])));\n        fetch(\n          \"https://3nkkif0kc7.execute-api.us-east-1.amazonaws.com/id/\" +\n            getRandom(ids)\n        )\n          .then((res: any): any => res.json())\n          .then((json: any): any => setChar2(createCharacter(json[0])));\n      });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"second useffect:\", char1, char2);\n    if (char1 === null || char2 === null) return;\n    const state1 = Fightengine.init(char1, char2);\n\n    let nextState = Fightengine.getNextStep(state1);\n    //max 333 steps\n    for (let i = 0; i < 1500; i++) {\n      nextState = Fightengine.getNextStep(nextState);\n      if (nextState.fightEnded) break;\n    }\n    console.log(nextState.logs);\n    setResultLog(nextState.logs);\n  }, [char1, char2]);\n\n  console.log(idList, char1, char2);\n\n  return (\n    <div className=\"consumptionForm\">\n      <h1>Ruoka Kombat 3</h1>\n      {/* debug:{idList.length},{char1 ? char1.name : null},\n      {char2 ? char2.name : null} */}\n      {!char1 || !char2 ? (\n        <div>Ladataan...</div>\n      ) : (\n        <table className=\"tui-table\" style={{ minWidth: \"100%\" }}>\n          <thead>\n            <tr>\n              <th>\n                {char1.name.split(\",\")[0]}\n                <p className=\"additionalNameInfo\">\n                  {char1.name.split(\",\").slice(1).join(\",\")}\n                </p>\n              </th>\n              <th>VS</th>\n              <th>\n                {char2.name.split(\",\")[0]}\n                <p className=\"additionalNameInfo\">\n                  {char2.name.split(\",\").slice(1).join(\",\")}\n                </p>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{char1.hp.toFixed(2)} kcal</td>\n              <td>Energia</td>\n              <td>{char2.hp.toFixed(2)} kcal</td>\n            </tr>\n            <tr>\n              <td>{char1.attackPower} g</td>\n              <td>Hiilihydraatit</td>\n              <td>{char2.attackPower} g</td>\n            </tr>\n            <tr>\n              <td>{char1.defencePower} g</td>\n              <td>Proteiini</td>\n              <td>{char2.defencePower} g</td>\n            </tr>\n            <tr>\n              <td>{char1.fats} g</td>\n              <td>Rasva</td>\n              <td>{char2.fats} g</td>\n            </tr>\n            <br />\n            <hr />\n            <br />\n            <tr>\n              <td>{char1.hp.toFixed(0)}</td>\n              <td>Health</td>\n              <td>{char2.hp.toFixed(0)}</td>\n            </tr>\n            <tr>\n              <td>{char1.attackPower}</td>\n              <td>Attack</td>\n              <td>{char2.attackPower}</td>\n            </tr>\n            <tr>\n              <td>{char1.defencePower}</td>\n              <td>Defence</td>\n              <td>{char2.defencePower}</td>\n            </tr>\n            <tr>\n              <td>{char1.delay} </td>\n              <td>Delay</td>\n              <td>{char2.delay}</td>\n            </tr>\n          </tbody>\n        </table>\n      )}\n\n      <br />\n      <br />\n      <span className=\"tui-divider white-255-border\"></span>\n      <br />\n      <br />\n      <div className=\"cyan-168\">\n        <fieldset className=\"tui-input-fieldset\">\n          {!char1 || !char2 ? (\n            <div>Ladataan...</div>\n          ) : (\n            <table className=\"tui-table\" style={{ minWidth: \"100%\" }}>\n              <thead>\n                <tr>\n                  <th>Tapahtuma</th>\n                  <th>{char1.name.slice(0, 8)}</th>\n                  <th>{char2.name.slice(0, 8)}</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {resultLog.map((logObj, i) => (\n                  <tr>\n                    <td>\n                      {logObj.currTime.toFixed(2) +\n                        \"s \" +\n                        logObj.whoHit.slice(0, 12)}\n                      {i > 0\n                        ? i === resultLog.length - 1\n                          ? \". voitti!\"\n                          : \". löi\"\n                        : \"Taistelu alkaa\"}\n                    </td>\n                    <td>\n                      {logObj.currHp1 <= 0 ? 0 : logObj.currHp1.toFixed(2)} hp\n                    </td>\n                    <td>\n                      {logObj.currHp2 <= 0 ? 0 : logObj.currHp2.toFixed(2)} hp\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n          <legend>Tulokset</legend>\n        </fieldset>\n      </div>\n    </div>\n  );\n};\n\n/*\n  \n  n build... Failed to compile. \n  src/App.tsx Syntax error: Unexpected token, expected \",\" (9:49) 7 | 8 | export const App = () => { > 9 | const [resultLog, setResultLog] = useState([] as IFightLogLine[]); | ^ 10 | const [idList, setIdList] = useState([] as number[]); 11 | const [char1, setChar1] = useState(null as ICharacter | null); 12 | const [char2, setChar2] = useState(null as ICharacter | null); \n    src/Character.tsx Syntax error: Unexpected token, expected \",\" (25:5) 23 | stats.Valuelist[3] 24 | ).toFixed(2) > 25 | } as ICharacter); | ^ 26 | info Visit https://yarnpkg.com/e*/\n","import { StrictMode } from \"react\";\n// @ts-ignore\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport { App } from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}